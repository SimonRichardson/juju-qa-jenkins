## Jobs for building juju on ephemeral machines.

- job:
    name: build-juju
    node: ephemeral-noble-16c-64g-amd64
    concurrent: true
    description: |-
      Build juju binaries for specified platform
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - build-name:
          name: build-juju-${{BUILD_LABEL}}
    properties:
      - build-discarder:
          days-to-keep: 30
          num-to-keep: 50
          artifact-days-to-keep: 30
          artifact-num-to-keep: 50
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
      - validating-string:
          description: "Platform for which to build."
          name: PLATFORM
          regex: ^.*\/.*$
          msg: Enter a valid go os/arch
      - string:
          default: ""
          description: "Build tags to pass to makefile."
          name: BUILD_TAGS
      - string:
          default: ""
          description: "Label to use in naming build artefacts."
          name: LABEL
      - validating-string:
          description: "Label to use when renaming the build."
          name: BUILD_LABEL
          regex: ^\S*$
          msg: Enter a build label
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - get-s3-source-payload
      - setup-go-environment
      - set-build-description:
          GOVERSION: "${{GOVERSION}}"
      - make-juju:
          platform: ${{PLATFORM}}
          build_tags: ${{BUILD_TAGS}}
      - conditional-step:
          condition-kind: regex-match
          label: "$PLATFORM"
          regex: "windows.*"
          steps:
            - make-windows-installer:
                platform: ${{PLATFORM}}
      - create-build-payload-tarballs:
          platform: ${{PLATFORM}}
          label: ${{LABEL:-}}
      - upload-s3-binaries:
          platform: ${{PLATFORM}}
          label: ${{LABEL:-}}
      - conditional-step:
          condition-kind: and
          condition-operands:
            - condition-kind: regex-match
              label: "$PLATFORM"
              regex: "^(?!(darwin|windows)).*"
            - condition-kind: strings-match
              condition-string1: "$LABEL"
              condition-string2: ""
          steps:
            - upload-s3-agent-binaries:
                platform: ${{PLATFORM}}

- builder:
    name: "make-windows-installer"
    builders:
      - get-s3-installshield:
          dest: $HOME
      - shell: |-
          #!/bin/bash
          set -eux

          # Make installer.
          platform_dir={platform}
          build_platform_dir="${{BUILD_DIR}}/${{platform_dir//\//_}}/bin"
          juju_exe=${{build_platform_dir}}/juju.exe
          iss_dir=${{JUJU_SRC_PATH}}/scripts/win-installer
          iscc_cmd="$HOME/.wine/drive_c/Program Files (x86)/Inno Setup 5/ISCC.exe"
          cp "${{juju_exe}}" "${{iss_dir}}"
          (cd ${{iss_dir}} && xvfb-run -e /dev/stdout --auto-servernum wine "${{iscc_cmd}}" setup.iss)
          cp ${{iss_dir}}/Output/juju-setup-${{JUJU_VERSION}}.exe ${{build_platform_dir}}

# make-juju is responsible for making the juju binaries for a given
# platform that is in GOOS/GOARCH format. For example "linux/amd64".
# Expected parameters:
#   platform: go style platform
# Expected pre-requisites:
# - get-s3-source-payload has been called before this builder.
- builder:
    name: "make-juju"
    builders:
      - shell: |-
          #!/bin/bash
          set -ex

          if [ -z "{platform}" ]; then
            echo "platform var is empty"
            exit 1
          fi

          touch make-juju.properties
          echo "CLIENT_PACKAGE_PLATFORMS={platform}" >> make-juju.properties
          echo "AGENT_PACKAGE_PLATFORMS={platform}" >> make-juju.properties
          if [ ! -z "{build_tags}" ]; then
            echo BUILD_TAGS={build_tags} >> make-juju.properties
          fi
          cat make-juju.properties
      - inject:
          properties-file: make-juju.properties
      - shell: |-
          #!/bin/bash
          set -eu

          rm -rf make-juju.properties
      - host-src-command:
          src_command: !include-raw-verbatim: ../scripts/snippet_make-release-build.sh

- job:
    name: build-jujud-operator
    node: ephemeral-noble-16c-64g-amd64
    description: Build juju docker image for caas operator on all platforms.
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - timeout:
          fail: true
          timeout: 45
          type: absolute
    parameters:
      - validating-string:
          description: The git short hash for the commit you wish to build
          name: SHORT_GIT_COMMIT
          regex: ^\S{{7}}$
          msg: Enter a valid 7 char git sha
      - string:
          default: "linux/amd64 linux/arm64 linux/s390x linux/ppc64el"
          description: "Space seperated list of Go Platforms to build the OCI images for"
          name: BUILD_PLATFORMS
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - get-s3-source-payload
      - setup-go-environment
      - set-build-description:
          GOVERSION: "${{GOVERSION}}"
      - shell: |-
          #!/bin/bash
          set -eu

          touch build.properties
          echo "DOCKER_USERNAME=public.ecr.aws/jujuqabot/build-${{SHORT_GIT_COMMIT}}" >> build.properties

          cat build.properties
      - inject:
          properties-file: build.properties
      - install-docker
      - docker-login
      - ensure-aws-credentials
      - docker-ecr-login
      - get-s3-build-payload-packaging:
          platforms: "${{BUILD_PLATFORMS}}"
      - host-src-command:
          src_command: !include-raw-verbatim: ../scripts/snippet_setup_ecr_public.sh
      - host-src-command:
          src_command: !include-raw-verbatim: ../scripts/snippet_caas-jujud-operator.sh

- builder:
    name: "create-build-payload-tarballs"
    builders:
      - shell: |-
          #!/bin/bash
          set -e

          if [ -z "{platform}" ]; then
            echo "platform var is empty"
            exit 1
          fi

          echo "Creating build payload tarballs for platform \"{platform}\""

          platform_dir={platform}
          build_platform_dir="${{BUILD_DIR}}/${{platform_dir//\//_}}/bin"

          juju_name=juju
          if [[ -f "${{build_platform_dir}}/juju.exe" ]]; then
            juju_name=juju.exe
          fi

          jujud_name=
          if [[ -f "${{build_platform_dir}}/jujud" ]]; then
            echo "jujud exists for platform {platform}"
            jujud_name=jujud
          elif [[ -f "${{build_platform_dir}}/jujud.exe" ]]; then
            echo "jujud exists for platform {platform}"
            jujud_name=jujud.exe
          fi

          jujuc_name=
          if [[ -f "${{build_platform_dir}}/jujuc" ]]; then
            echo "jujuc exists for platform {platform}"
            jujuc_name=jujuc
          elif [[ -f "${{build_platform_dir}}/jujuc.exe" ]]; then
            echo "jujuc exists for platform {platform}"
            jujuc_name=jujuc.exe
          fi

          juju_metadata_name=
          if [[ -f "${{build_platform_dir}}/juju-metadata" ]]; then
            echo "juju-metadata exists for platform {platform}"
            juju_metadata_name=juju-metadata
          elif [[ -f "${{build_platform_dir}}/juju-metadata.exe" ]]; then
            echo "juju-metadata exists for platform {platform}"
            juju_metadata_name=juju-metadata.exe
          fi

          juju_installer_name=
          if [[ -f "${{build_platform_dir}}/juju-setup-${{JUJU_VERSION}}.exe" ]]; then
            juju_installer_name=juju-setup-${{JUJU_VERSION}}.exe
          fi

          # The k8sagent binary has been renamed to containeragent but we want
          # to retain the copy step until all branches have been properly
          # updated.
          containeragent_name=
          if [[ -f "${{build_platform_dir}}/k8sagent" ]]; then
            echo "k8sagent exists for platform {platform}"
            containeragent_name=k8sagent
          elif [[ -f "${{build_platform_dir}}/k8sagent.exe" ]]; then
            echo "k8sagent exists for platform {platform}"
            containeragent_name=k8sagent.exe
          fi

          if [[ -f "${{build_platform_dir}}/containeragent" ]]; then
            echo "containeragent exists for platform {platform}"
            containeragent_name=containeragent
          elif [[ -f "${{build_platform_dir}}/containeragent.exe" ]]; then
            echo "containeragent exists for platform {platform}"
            containeragent_name=containeragent.exe
          fi

          # TODO(pebble): pebble may change name for 2.9+ release.
          pebble_name=
          if [[ -f "${{build_platform_dir}}/pebble" ]]; then
            echo "pebble exists for platform {platform}"
            pebble_name=pebble
          elif [[ -f "${{build_platform_dir}}/pebble.exe" ]]; then
            echo "pebble exists for platform {platform}"
            pebble_name=pebble.exe
          fi

          wait_for_name=
          if [[ -f "${{build_platform_dir}}/juju-wait-for" ]]; then
            echo "juju-wait-for exists for platform {platform}"
            wait_for_name=juju-wait-for
          elif [[ -f "${{build_platform_dir}}/juju-wait-for.exe" ]]; then
            echo "juju-wait-for exists for platform {platform}"
            wait_for_name=juju-wait-for.exe
          fi

          arch=$(echo "{platform}" | cut -f 2 -d '/')
          os=$(echo "{platform}" | cut -f 1 -d '/')

          FILE_LABEL=""
          if [ ! -z "{label}" ]; then
            FILE_LABEL="-{label}"
          fi
          binary_tarball_name="juju_binaries-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}${{FILE_LABEL}}-${{arch}}.tar.xz"
          echo "Creating build payload for {platform} - ${{binary_tarball_name}}"

          tar cfJ ${{build_platform_dir}}/${{binary_tarball_name}} \
            -C ${{build_platform_dir}}/ \
            ${{juju_name}} \
            ${{jujud_name}} \
            ${{jujuc_name}} \
            ${{juju_metadata_name}} \
            ${{containeragent_name}} \
            ${{pebble_name}} \
            ${{juju_installer_name}} \
            ${{wait_for_name}}

          if [[ -z "${{jujud_name}}" && -z "${{jujuc_name}}" ]]; then
            echo "no agent tarball for platform {platform}"
            exit 0
          fi

          agent_tarball_name=juju-${{JUJU_VERSION}}-${{os}}${{FILE_LABEL}}-${{arch}}.tgz
          echo "Creating agent payload for {platform} - ${{agent_tarball_name}}"

          tar cfz ${{build_platform_dir}}/${{agent_tarball_name}} \
            --owner root \
            --group root \
            --no-same-owner \
            -C ${{build_platform_dir}}/ \
            ${{jujud_name}} \
            ${{jujuc_name}}
