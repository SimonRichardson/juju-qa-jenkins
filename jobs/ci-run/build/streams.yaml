## Jobs and builders for handling agent json
- job:
    name: generate-agent-testing-streams
    node: ephemeral-noble-8c-32g-amd64
    description: |-
      Build simple streams agent product json
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
    builders:
      - get-s3-build-details
      - get-s3-agent-payload:
          dest: ${{WORKSPACE}}
          platforms: linux/amd64 linux/arm64 linux/s390x linux/ppc64el
      - shell: |-
          #!/bin/bash
          set -e
          mkdir -p ${{WORKSPACE}}/agent_json
      - generate-agent-json:
          platforms: linux/amd64 linux/arm64 linux/s390x linux/ppc64el
          product_name: ubuntu
          output_dir: "${{WORKSPACE}}/agent_json"
      - install-simplestreams
      - install-s3cmd
      - get-s3-creds
      - shell: |-
          #!/bin/bash
          set -eu

          # Generate the streams data.
          mkdir -p generated
          agent_json_file_path=${{WORKSPACE}}/agent_json/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}-agent.json
          json2streams --juju-format \
            "${{agent_json_file_path}}" \
            "${{WORKSPACE}}/generated/"

           GENERATED_STREAMS_TARBALL=build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}-generated-streams.tar.xz
           tar cfJ ${{GENERATED_STREAMS_TARBALL}} -C generated/ streams

           s3cmd --config $S3_CFG \
               put \
               "${{GENERATED_STREAMS_TARBALL}}" \
               s3://juju-qa-data/ci-run/build-${{SHORT_GIT_COMMIT}}/agents/

- builder:
    # Used to generate agent metadata for CI tests
    name: generate-agent-json
    # Note: This builder expects the following parameters
    #  (they are used within the script)
    # platforms: space seperated list of go style platforms (e.g. linux/arm64)
    # product_name: Product name to use (e.g. ubuntu)
    # output_dir: The directory in which to place the resulting json files
    builders:
      - shell: !include-raw-expand: ../scripts/generate-agent-json.template.sh

- job:
    name: publish-testing-streams-aws
    description: |-
      Publish stream metadata and agents from this build for use in
      functional testing.
    node: ephemeral-noble-small-amd64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
    builders:
      - wait-for-cloud-init
      - install-common-tools
      - install-s3cmd
      - get-s3-creds
      - get-s3-build-details
      - set-test-description
      - shell: |-
          #!/bin/bash
          set -eu

          mkdir -p ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}/
      - get-s3-agent-payload:
          dest: ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}
          platforms: linux/amd64 linux/arm64 linux/s390x linux/ppc64el
      - retrieve-generated-streams
      - install-stream-patcher
      - shell: |-
          #!/bin/bash
          set -e

          # Patch the index/product files so that all paths are namespaced by
          # the build ID. Basically, we create the following folder structure:
          # $root/
          #  - builds/build-SHA
          #    - streams/v1
          #    - agents/*.tgz
          ${{WORKSPACE}}/stream-patcher.py \
            ${{WORKSPACE}}/streams \
            ${{SHORT_GIT_COMMIT}}

          s3cmd sync --config $S3_CFG \
            ${{WORKSPACE}}/streams \
            s3://ci-run-streams/builds/build-${{SHORT_GIT_COMMIT}}/ \
            --acl-public

          # NOTE: this sync removes the "build-$SHA" indirection and effectively
          # pulls the binaries one folder up (under agent/)
          s3cmd sync --config $S3_CFG \
            ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}/ \
            s3://ci-run-streams/builds/build-${{SHORT_GIT_COMMIT}}/agent/ \
            --acl-public

- job:
    name: publish-testing-streams-azure
    description: |-
      Publish stream metadata and agents from this build for use in
      functional testing.
    node: ephemeral-noble-small-amd64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
    builders:
      - wait-for-cloud-init
      - install-common-tools
      - install-azure-cli
      - get-s3-build-details
      - set-test-description
      - shell: |-
          #!/bin/bash
          set -e

          rm -fr ${{WORKSPACE}}/agent || true
          mkdir -p ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}/
      - get-s3-agent-payload:
          dest: ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}
          platforms: linux/amd64 linux/arm64 linux/s390x linux/ppc64el
      - retrieve-generated-streams
      - install-stream-patcher
      - get-azure-creds
      - shell: |-
          #!/bin/bash
          set -eu

          # Patch the index/product files so that all paths are namespaced by
          # the build ID. Basically, we create the following folder structure:
          # $root/
          #  - builds/build-SHA
          #    - streams/v1
          #    - agents/*.tgz
          ${{WORKSPACE}}/stream-patcher.py \
            ${{WORKSPACE}}/streams \
            ${{SHORT_GIT_COMMIT}}

          set +x
          az storage blob upload-batch \
            --account-key=${{AZURE_STORAGE_ACCESS_KEY}} \
            --account-name=${{AZURE_STORAGE_ACCOUNT}} \
            -d juju-agents \
            -s ${{WORKSPACE}}/streams \
            --destination-path ci-run-streams/builds/build-${{SHORT_GIT_COMMIT}}/streams

          az storage blob upload-batch \
            --account-key=${{AZURE_STORAGE_ACCESS_KEY}} \
            --account-name=${{AZURE_STORAGE_ACCOUNT}} \
            -d juju-agents \
            -s ${{WORKSPACE}}/agent/build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}} \
            --destination-path ci-run-streams/builds/build-${{SHORT_GIT_COMMIT}}/agent

- builder:
    name: retrieve-generated-streams
    builders:
      - install-s3cmd
      - get-s3-creds
      - shell: |-
          GENERATED_STREAMS_TARBALL=build-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}-generated-streams.tar.xz
          s3cmd --config $S3_CFG \
            get \
            s3://juju-qa-data/ci-run/build-${{SHORT_GIT_COMMIT}}/agents/${{GENERATED_STREAMS_TARBALL}} \
            ./
          tar xf ${{GENERATED_STREAMS_TARBALL}}

- builder:
    name: install-stream-patcher
    builders:
      - shell: |-
          #!/bin/bash

          # Create the stream product/index patching script on the fly

          index_type="agents"
          if [[ "${{JUJU_VERSION}}" == 2.8* ]]; then
            index_type="tools"
          fi

          cat  <<EOT > ${{WORKSPACE}}/stream-patcher.py
          #!/usr/bin/env python3

          from argparse import ArgumentParser
          from os import path
          import collections.abc
          import json
          import sys


          def main():
              parser = ArgumentParser()
              parser.add_argument(
                  'stream_folder', help='The folder where the stream contents have been unpacked')
              parser.add_argument(
                  'build_sha', help='The short git SHA of the current build')
              args = parser.parse_args()

              rewrite_agent_paths(args.stream_folder, args.build_sha)

          def rewrite_agent_paths(stream_folder, build_sha):
              target = path.join(
                  stream_folder,
                  "v1",
                  "com.ubuntu.juju-build-{{}}-${{index_type}}.json".format(build_sha)
              )
              with open(target) as f:
                  stream_data = json.load(f)

              stream_data = patch_agent_path_r(stream_data, stream_data, build_sha)
              with open(target, 'w') as f:
                  f.write(json.dumps(stream_data, indent=4))

          def patch_agent_path_r(d, u, sha):
              for k, v in u.items():
                  if isinstance(v, collections.abc.Mapping):
                      d[k] = patch_agent_path_r(d.get(k, {{}}), v, sha)
                  elif isinstance(v, str):
                      if "agent/build-" in v:
                          d[k] = "agent/{{}}".format(
                              str.lstrip(v, "agent/build-{{}}/".format(sha))
                          )
              return d


          if __name__ == "__main__":
              sys.exit(main())
          EOT

          chmod +x ${{WORKSPACE}}/stream-patcher.py
