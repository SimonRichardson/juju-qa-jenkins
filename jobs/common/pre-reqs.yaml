# install-docker will install and setup docker on a ubuntu machine.
# It will also enable cross compilation support and add the current user to the
# Docker group.
- builder:
    name: install-docker
    builders:
      - shell:
          !include-raw-verbatim: scripts/setup_steps-install-docker.sh

# docker-login will run the login steps for connecting this host's docker daemon
# to the Juju docker hub account.
- builder:
    name: docker-login
    builders:
      - get-docker-creds
      - host-src-command:
          src_command: |-
            #!/bin/bash
            set -eu
            set +x

            echo "Logging into Dockerhub with username ${{DOCKERHUB_U}}"
            echo "$DOCKERHUB_P" | docker login -u "$DOCKERHUB_U" --password-stdin

# docker-ecr-login will run the login steps for connecting this host's docker
# to the Juju ecr public account.
- builder:
    name: docker-ecr-login
    builders:
      - host-src-command:
          src_command: |-
            #!/bin/bash
            set -eu
            set +x

            if ! [ -x "$(command -v aws)" ]; then
                sudo snap install aws-cli --classic || true
            fi
            echo "Logging into public.ecr.aws with ECR credentials"
            aws ecr-public get-login-password | docker login -u AWS --password-stdin public.ecr.aws

- builder:
    name: apt-install
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            {packages}

- builder:
    name: go-install
    builders:
      - shell: |-
          #!/bin/bash
          set -eux
          go install {modules}

# install-common-tools installs the common set of tools needed between 99% of
# jobs in this repo. This builder assumes the install target is Ubuntu.
- builder:
    name: install-common-tools
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          echo "Updating packages"
          sudo DEBIAN_FRONTEND=noninteractive apt-get update

          echo "Installing common tools"
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            make

- builder:
    name: install-go
    builders:
    - shell:
        !include-raw-verbatim: "scripts/install-go.sh"

- builder:
    name: install-microk8s
    builders:
    - shell: |-
        #!/bin/bash
        set -ex

        # Install microk8s and kubectl
        sudo snap install microk8s --classic --channel={channel}
        sudo snap install kubectl --classic --channel={channel}
        echo "waiting for microk8s storage to become available"

        NEXT_WAIT_TIME=0
        until [ $NEXT_WAIT_TIME -eq 30 ] || sudo microk8s enable dns && microk8s status --yaml | grep -q 'dns: enabled'; do
            sleep $(( NEXT_WAIT_TIME++ ))
        done
        if [ $NEXT_WAIT_TIME == 30 ]; then
            echo "microk8s dns is still not enabled"
            exit 1
        fi

        NEXT_WAIT_TIME=0
        # Required addon hostpath-storage is called storage for older versions of microk8s
        until [ $NEXT_WAIT_TIME -eq 30 ] || sudo microk8s enable hostpath-storage || sudo microk8s enable storage && microk8s status --yaml | grep -q 'storage: enabled'; do
            sleep $(( NEXT_WAIT_TIME++ ))
        done
        if [ $NEXT_WAIT_TIME == 30 ]; then
            echo "microk8s storage is still not enabled"
            exit 1
        fi

        sudo getent group microk8s || sudo addgroup microk8s
        sudo usermod -a -G microk8s $USER

# setup-go-environment is responsible for setting up the basic GO environment
# needed to build and run go applications related to juju.
#
# This builder well set and make the GOPATH
- builder:
    name: setup-go-environment
    builders:
      - install-go
      - inject:
          properties-content: |-
            GOPATH=${{WORKSPACE}}/go-path
      - shell: |-
          #!/bin/bash
          set -ex
          mkdir -p "$GOPATH"

# set-common-environment is responsible for setting up a common environment for
# our jobs. This shouldn't be used as a splat everything in builder that grows
# out of control. It should be simple and only provide constructs that the vast
# majority of jobs needs.
#
# It should be safe for any job to add this builder. Preferably placed at the
# top of a builder list.
- builder:
    name: set-common-environment
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          touch build.properties
          echo "BUILD_DIR=${{WORKSPACE}}/build" >> build.properties

          cat build.properties
      - inject:
          properties-file: build.properties
      - shell: |-
          #!/bin/bash
          set -e

          mkdir -p ${{BUILD_DIR}}

# wait-for-cloud-init is a pre-req utility for jobs running on on ephemeral
# nodes where we use cloud-init to stepup the node. We are waiting for the locks
# to be release on apt so the rest of our scripts can get on with the job
# quickly and not fail.
#
# If in doubt just add this as the first builder to your job. It won't do any
# harm.
- builder:
    name: wait-for-cloud-init
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          # Just in case, wait for cloud-init.
          cloud-init status --wait 2> /dev/null || true
          while sudo lsof /var/lib/dpkg/lock-frontend 2> /dev/null; do
              echo "Waiting for dpkg lock..."
              sleep 10
          done
          while sudo lsof /var/lib/apt/lists/lock 2> /dev/null; do
              echo "Waiting for apt lock..."
              sleep 10
          done

- builder:
    name: install-s3cmd
    builders:
    - shell: |-
        #!/bin/bash
        set -xeu

        if [ -z "$(command -v s3cmd)" ]; then
          sudo DEBIAN_FRONTEND=noninteractive apt update;
          sudo DEBIAN_FRONTEND=noninteractive apt install -y python3-pip;
          sudo pip3 install s3cmd;
        fi

        echo Using s3cmd "$(command -v s3cmd)"

- builder:
    name: install-azure-cli
    builders:
    - shell: |-
        #!/bin/bash
        # Steps come from https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt
        set -eux

        sudo DEBIAN_FRONTEND=noninteractive apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg

        curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null

        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list

        sudo DEBIAN_FRONTEND=noninteractive apt-get update

        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y azure-cli

- builder:
    name: install-simplestreams
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          sudo DEBIAN_FRONTEND=noninteractive apt update;
          sudo DEBIAN_FRONTEND=noninteractive apt install -y simplestreams

- builder:
    name: install-aws-libs
    builders:
    - shell: |-
        #!/bin/bash
        set -xeu

        sudo DEBIAN_FRONTEND=noninteractive apt update;
        sudo DEBIAN_FRONTEND=noninteractive apt install -y python3-pip;
        sudo pip3 install apache-libcloud;

- builder:
    name: install-gce-libs
    builders:
    - shell: |-
        #!/bin/bash
        set -xeu

        sudo DEBIAN_FRONTEND=noninteractive apt update;
        sudo DEBIAN_FRONTEND=noninteractive apt install -y python3-pip;
        sudo pip3 install apache-libcloud;

- builder:
    name: install-equinix-libs
    builders:
    - shell: |-
        #!/bin/bash
        set -xeu

        sudo DEBIAN_FRONTEND=noninteractive apt update;
        sudo DEBIAN_FRONTEND=noninteractive apt install -y python3-pip;
        sudo pip3 install pytz;

- builder:
    name: get-lxd-cleanup-scripts
    builders:
    - checkout-qa-repo
    - shell: |-
        #!/bin/bash
        set -eux

        cd scripts
        git checkout origin/main -- jobs/z-jobs/scripts/clean_lxd.py
        cd ${{WORKSPACE}}
    - inject:
        properties-content: |-
            SCRIPTS_DIR=${{WORKSPACE}}/scripts/jobs/z-jobs/scripts/

- builder:
    name: get-aws-cleanup-scripts
    builders:
    - checkout-qa-repo
    - install-aws-libs
    - shell: |-
        #!/bin/bash
        set -eux

        cd scripts
        git checkout origin/main -- jobs/z-jobs/scripts/aws.py
        cd ${{WORKSPACE}}
    - inject:
        properties-content: |-
            SCRIPTS_DIR=${{WORKSPACE}}/scripts/jobs/z-jobs/scripts/


- builder:
    name: get-gce-cleanup-scripts
    builders:
    - checkout-qa-repo
    - install-gce-libs
    - shell: |-
        #!/bin/bash
        set -eux

        sudo snap install google-cloud-cli --classic || true

        cd scripts
        git checkout origin/main -- jobs/z-jobs/scripts/gce.py
        cd ${{WORKSPACE}}
    - inject:
        properties-content: |-
            SCRIPTS_DIR=${{WORKSPACE}}/scripts/jobs/z-jobs/scripts/

- builder:
    name: get-maas-cleanup-scripts
    builders:
    - checkout-qa-repo
    - shell: |-
        #!/bin/bash
        set -eux

        cd scripts
        git checkout origin/main -- jobs/z-jobs/scripts/clean_maas
        cd ${{WORKSPACE}}
    - inject:
        properties-content: |-
            SCRIPTS_DIR=${{WORKSPACE}}/scripts/jobs/z-jobs/scripts/clean_maas

- builder:
    name: get-equinix-cleanup-scripts
    builders:
    - checkout-qa-repo
    - install-equinix-libs
    - shell: |-
        #!/bin/bash
        set -eux

        cd scripts
        git checkout origin/main -- jobs/z-jobs/scripts/clean_equinix.py
        cd ${{WORKSPACE}}
    - inject:
        properties-content: |-
            SCRIPTS_DIR=${{WORKSPACE}}/scripts/jobs/z-jobs/scripts/

- builder:
    name: checkout-qa-repo
    builders:
    - shell: |-
        #!/bin/bash
        set -eux

        cd ${{WORKSPACE}}
        if [ ! -d "${{WORKSPACE}}/scripts" ]; then
            git clone git@github.com:juju/juju-qa-jenkins.git --no-checkout --depth 1 scripts
        fi

- builder:
    name: install-mongo4.4
    builders:
    - shell:
        !include-raw-verbatim: "scripts/install-mongo4.4.sh"
